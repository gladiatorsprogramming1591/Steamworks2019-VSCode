// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc0.Steamworks2017;

import org.usfirst.frc0.Steamworks2017.subsystems.myDrive;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.drive.MecanumDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.drive.MecanumDrive;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static WPI_TalonSRX driveTrainWPI_TalonSRXFL;
    public static WPI_TalonSRX driveTrainWPI_TalonSRXBL;
    public static WPI_TalonSRX driveTrainWPI_TalonSRXFR;
    public static WPI_TalonSRX driveTrainWPI_TalonSRXBR;
    public static MecanumDrive driveTrainMecanumDrive;
    public static WPI_TalonSRX winchWinch;
    public static DigitalInput flapUpperLimitFlap;
    public static DigitalInput flapLowerLimitFlap;
    public static SpeedController flapFlapSC;
    public static DigitalInput gearPlungerBackPlungerLimit;
    public static SpeedController gearPlungerGearSC;
    public static DigitalInput gearPlungerFrontPlungerLimit;
    public static DigitalInput gearPlungerPositionSwitch;
    public static AnalogInput rangeFinderSonarAI;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public static void init() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainWPI_TalonSRXFL = new WPI_TalonSRX(5);
        LiveWindow.addActuator("DriveTrain", "WPI_TalonSRXFL", driveTrainWPI_TalonSRXFL);
        
        driveTrainWPI_TalonSRXBL = new WPI_TalonSRX(4);
        LiveWindow.addActuator("DriveTrain", "WPI_TalonSRXBL", driveTrainWPI_TalonSRXBL);
        
        driveTrainWPI_TalonSRXFR = new WPI_TalonSRX(6);
        LiveWindow.addActuator("DriveTrain", "WPI_TalonSRXFR", driveTrainWPI_TalonSRXFR);
        
        driveTrainWPI_TalonSRXBR = new WPI_TalonSRX(7);
        LiveWindow.addActuator("DriveTrain", "WPI_TalonSRXBR", driveTrainWPI_TalonSRXBR);
        
        driveTrainMecanumDrive = new MecanumDrive(driveTrainWPI_TalonSRXFL, driveTrainWPI_TalonSRXBL, driveTrainWPI_TalonSRXFR, driveTrainWPI_TalonSRXBR);
        
        driveTrainMecanumDrive.setSafetyEnabled(true);
        driveTrainMecanumDrive.setExpiration(0.1);
        //driveTrainMecanumDrive.setSensitivity(0.5); DEPRECATED WITH NO WAY TO REPLACE
        driveTrainMecanumDrive.setMaxOutput(1.0);

        driveTrainMecanumDrive.setRightSideInverted(true);
        
        winchWinch = new WPI_TalonSRX(2);
        LiveWindow.addActuator("Winch", "Winch", winchWinch);
        
        flapUpperLimitFlap = new DigitalInput(0);
        LiveWindow.addSensor("Flap", "UpperLimitFlap", flapUpperLimitFlap);
        
        flapLowerLimitFlap = new DigitalInput(1);
        LiveWindow.addSensor("Flap", "LowerLimitFlap", flapLowerLimitFlap);
        
        flapFlapSC = new Spark(0);
        LiveWindow.addActuator("Flap", "FlapSC", (Spark) flapFlapSC);
        
        gearPlungerBackPlungerLimit = new DigitalInput(2);
        LiveWindow.addSensor("GearPlunger", "BackPlungerLimit", gearPlungerBackPlungerLimit);
        
        gearPlungerGearSC = new Spark(1);
        LiveWindow.addActuator("GearPlunger", "GearSC", (Spark) gearPlungerGearSC);
        
        gearPlungerFrontPlungerLimit = new DigitalInput(3);
        LiveWindow.addSensor("GearPlunger", "FrontPlungerLimit", gearPlungerFrontPlungerLimit);
        
        gearPlungerPositionSwitch = new DigitalInput(4);
        LiveWindow.addSensor("GearPlunger", "PositionSwitch", gearPlungerPositionSwitch);
        
        rangeFinderSonarAI = new AnalogInput(1);
        LiveWindow.addSensor("RangeFinder", "SonarAI", rangeFinderSonarAI);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	}
}
