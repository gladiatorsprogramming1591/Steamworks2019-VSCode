package org.usfirst.frc0.Steamworks2017.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc0.Steamworks2017.Robot;

import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.Relay.Value;
import edu.wpi.first.wpilibj.command.Command;

/**
 *
 */
public class PixyAlignWithTarget extends Command {
	
	boolean withinRange;
	int sightAttempts;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public PixyAlignWithTarget() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() { 
    	withinRange = false;
    	sightAttempts = 0;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
//    	Robot.driveTrain.myRobot.setLeftRightMotorOutputs(.3, -.3);
    	
    	// try {
	    // 	if(Robot.vision.packet1[0].X < 159)
	    // 		Robot.driveTrain.myRobot.setLeftRightMotorOutputs(-.3, -.3);
	    // 	else if(Robot.vision.packet1[0].X > 161)   
	    // 		Robot.driveTrain.myRobot.setLeftRightMotorOutputs(.3, .3);
	    // 	else
	    // 		withinRange = true;
	    // 	sightAttempts = 0;
    	// } catch(NullPointerException e) {
    	// 	sightAttempts++;
    	// 	if(sightAttempts > 5)
    	// 		withinRange = true;
    	// }
    	
//    	timer++;
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	return withinRange;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
