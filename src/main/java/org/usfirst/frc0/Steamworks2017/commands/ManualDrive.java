// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc0.Steamworks2017.commands;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc0.Steamworks2017.Robot;
import org.usfirst.frc0.Steamworks2017.subsystems.DriveTrain;
import com.kauailabs.navx.frc.*;

/**
 *
 */
public class ManualDrive extends Command {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	private boolean slow;
	private boolean reverse;
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public ManualDrive() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {

	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		if(Robot.oi.driveStick.getRawButton(4)) {
			slow = true;
			SmartDashboard.putBoolean("slow mode", true);
		}
		if(Robot.oi.driveStick.getRawButton(3)) {
			slow = false;
			SmartDashboard.putBoolean("slow mode", false);
		}
		if(Robot.oi.driveStick.getRawButton(5)) {
			reverse = true;
			SmartDashboard.putBoolean("reverse mode", true);
		}
		if(Robot.oi.driveStick.getRawButton(6)) {
			reverse = false;
			SmartDashboard.putBoolean("reverse mode", false);
		}
		
		
		//Polar
//		if(Robot.oi.driveStick.getMagnitude() > .05 && !slow){
//			Robot.driveTrain.driving(Robot.oi.driveStick.getMagnitude(),Robot.oi.driveStick.getDirectionDegrees(), Robot.oi.driveStick.getRawAxis(2));
//		} else if((Robot.oi.driveStick.getMagnitude() > .05 && slow)){
//			Robot.driveTrain.slowdrive(Robot.oi.driveStick.getMagnitude(),Robot.oi.driveStick.getDirectionDegrees(), Robot.oi.driveStick.getRawAxis(2));
//		}
		
		//slow
		// if(Robot.oi.driveStick.getMagnitude() > .05 && !slow && !reverse){
			//Robot.driveTrain.driving(Robot.oi.driveStick.getX(),-Robot.oi.driveStick.getY(), Robot.oi.driveStick.getRawAxis(2));

			//field oriented driving begins
			double joystickVert = Robot.oi.driveStick.getY() * -1;
			double joystickStrafe = Robot.oi.driveStick.getX();
			
		if(Robot.oi.driveStick.getMagnitude() > .05 && !slow && !reverse){
			double strafe = Robot.driveTrain.GyroManualStrafe(joystickVert, joystickStrafe);
			double vertical = Robot.driveTrain.GyroManualVert(joystickVert, joystickStrafe);
			Robot.driveTrain.driving(strafe, vertical, Robot.oi.driveStick.getRawAxis(2));
			//field oriented driving ends

			
		} else if((Robot.oi.driveStick.getMagnitude() > .05 && slow && !reverse)){
			Robot.driveTrain.slowdrive(Robot.oi.driveStick.getX(),-Robot.oi.driveStick.getY(), Robot.oi.driveStick.getRawAxis(2));
		} else if((Robot.oi.driveStick.getMagnitude() > .05 && !slow && reverse)){
			Robot.driveTrain.reversedrive(Robot.oi.driveStick.getX(),-Robot.oi.driveStick.getY(), Robot.oi.driveStick.getRawAxis(2));
		} else if((Robot.oi.driveStick.getMagnitude() > .05 && slow && reverse)){
			Robot.driveTrain.slowreversedrive(Robot.oi.driveStick.getX(),-Robot.oi.driveStick.getY(), Robot.oi.driveStick.getRawAxis(2));
		}
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.driveTrain.driving(0, 0, 0);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
