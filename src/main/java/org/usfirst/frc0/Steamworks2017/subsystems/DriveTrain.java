// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc0.Steamworks2017.subsystems;


//import org.usfirst.frc0.Steamworks2017.Robot;
import org.usfirst.frc0.Steamworks2017.RobotMap;
import org.usfirst.frc0.Steamworks2017.commands.*;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.drive.MecanumDrive;
import edu.wpi.first.wpilibj.command.Subsystem;



/**
 *
 */
public class DriveTrain extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX cANTalonFL = RobotMap.driveTrainWPI_TalonSRXFL;
    private final WPI_TalonSRX cANTalonBL = RobotMap.driveTrainWPI_TalonSRXBL;
    private final WPI_TalonSRX cANTalonFR = RobotMap.driveTrainWPI_TalonSRXFR;
    private final WPI_TalonSRX cANTalonBR = RobotMap.driveTrainWPI_TalonSRXBR;
    private final MecanumDrive MecanumDrive = RobotMap.driveTrainMecanumDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
//	private final int RAMPRATE = 12;

	// Put methods for controlling this subsystem
	// here. Call these from Commands.
	public MecanumDrive myRobot;

	//public CameraServer server;

//	public DriveTrain(){
//		initializeCamera();
//	}
//	public void initializeCamera(){
//		server = CameraServer.getInstance();
//		//    	server.setQuality(50);
//		server.startAutomaticCapture("Pixy");
//	}


	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new ManualDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());


	}


//	public void encoderBRControl(double m_PercentVBus){
//		cANTalonBR.changeControlMode(TalonControlMode.PercentVbus);
//		cANTalonBR.configEncoderCodesPerRev(25);
//		cANTalonBR.setVoltageRampRate(RAMPRATE);
//		cANTalonBR.enableControl();
//		cANTalonBR.set(m_PercentVBus);
//	}
//	public int EncoderBRPosition(){
//		return cANTalonBR.getEncPosition();
//	}
//	public int EncoderBRVelocity(){
//		return cANTalonBR.getEncVelocity();
//	}
//	public void EncoderBRStop(){
//		cANTalonBR.disableControl();
//	}
//	//Encoder readings for the back right encoder ^
//
//	public void encoderBLControl(double m_PercentVBus){
//		cANTalonBL.changeControlMode(TalonControlMode.PercentVbus);
//		cANTalonBL.configEncoderCodesPerRev(25);
//		cANTalonBL.setVoltageRampRate(RAMPRATE);
//		cANTalonBL.enableControl();
//		cANTalonBL.set(m_PercentVBus);
//	}
//	public int EncoderBLPosition(){
//		return cANTalonBL.getEncPosition();
//	}
//	public int EncoderBLVelocity(){
//		return cANTalonBL.getEncVelocity();
//	}
//	public void EncoderBLStop(){
//		cANTalonBL.disableControl();
//	}
//	//Encoder readings for the back left encoder ^
//
//	public void encoderFRControl(double m_PercentVBus){
//		cANTalonFR.changeControlMode(TalonControlMode.PercentVbus);
//		cANTalonFR.configEncoderCodesPerRev(25);
//		cANTalonFR.setVoltageRampRate(RAMPRATE);
//		cANTalonFR.enableControl();
//		cANTalonFR.set(m_PercentVBus);
//	}
//	public int EncoderFRPosition(){
//		return cANTalonFR.getEncPosition();
//	}
//	public int EncoderFRVelocity(){
//		return cANTalonFR.getEncVelocity();
//	}
//	public void EncoderFRStop(){
//		cANTalonFR.disableControl();
//	}
//	//Encoder readings for front right encoder ^
//
//	public void encoderFLControl(double m_PercentVBus){
//		cANTalonFL.changeControlMode(TalonControlMode.PercentVbus);
//		cANTalonFL.configEncoderCodesPerRev(25);
//		cANTalonFL.setVoltageRampRate(RAMPRATE);
//		cANTalonFL.enableControl();
//		cANTalonFL.set(m_PercentVBus);
//	}
//	public int EncoderFLPosition(){
//		return cANTalonFL.getEncPosition();
//	}
//	public int EncoderFLVelocity(){
//		return cANTalonFL.getEncVelocity();
//	}
//	public void EncoderFLStop(){
//		cANTalonFL.disableControl();
//	}
//	//Encoder readings for front left encoder ^

//	public void driving(double magnitude, double direction, double rotation) {
//		robotDrive.mecanumDrive_Polar(magnitude, direction, rotation, 0);
//	}
//
//	public void slowdrive(double magnitude, double direction, double rotation) {
//		robotDrive.mecanumDrive_Polar(magnitude / 2, direction / 2, rotation / 2, 0);
//	}
	
	public void driving(double x, double y, double rotation) {
		// MecanumDrive.mecanumDrive_Cartesian(x / 1, y / 1, rotation / 3, 0);
		MecanumDrive.driveCartesian(x / 1, y / 1, rotation / 3);
	}

//	public void driveRaw(double fl, double fr, double bl, double br) {
//		robotDrive.mecanumDrive_raw(fl, fr, bl, br);
//	}

	public void slowdrive(double x, double y, double rotation) {
		// MecanumDrive.mecanumDrive_Cartesian(x / 3, y / 3.5, rotation / 3.5, 0);
		MecanumDrive.driveCartesian(x / 3, y / 3.5, rotation / 3.5);
	}
	
	public void reversedrive(double x, double y, double rotation) {
		// MecanumDrive.mecanumDrive_Cartesian(x / 1, y / 1, rotation / 3, 180);
		MecanumDrive.driveCartesian(x / 1, y / 1, rotation / 3);
	}
	
	public void slowreversedrive(double x, double y, double rotation) {
		// MecanumDrive.mecanumDrive_Cartesian(x / 3, y / 3.5, rotation / 3.5, 180);
		MecanumDrive.driveCartesian(x / 3, y / 3.5, rotation / 3.5);
	}
	
	// public int getBLPosition(){
	// 	return cANTalonBL.getEncPosition();
	// }
	// public int getBRPosition(){
	// 	return cANTalonBR.getEncPosition();
	// }
	// public int getFLPosition(){
	// 	return cANTalonFL.getEncPosition();
	// }
	// public int getFRPosition(){
	// 	return cANTalonFR.getEncPosition();
	// }
}
